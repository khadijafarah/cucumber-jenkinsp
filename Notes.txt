Gherkin language

Scenario
Given - pre condition
When - actions we need to perform
And - supporting tag
Then - expected results

Recap-
What is framework?
-- it is an organized structure of folders and packages which allows us to write clean and maintanable code

build management tool.
-- maven

pom.xml is the main configuration file in maven project.

main -- it is used to write the code for development
test -- it is used to write the code to test the application
    -- java - for tech/coding we use java directory
    -- resources - for non tech/non code we use resources


cucumber - it supports BDD
        -- we use gherkin language (plain english text) to write the scenarios
        -- it works with junit

Scenario -- it is a test case
Given -- pre condition
When -- actions
And -- supporting tag
Then -- results

US 12345 - Employee search

Scenario - Search employee by id
Given user is navigated to HRMS Application
When user enters valid admin credentials
And user clicks on login button
And user navigates to employee list page
When user enters valid employee id
And clicks on search button
Then user is able to see employee information

Scenario - Search employee by name
Given user is navigated to HRMS Application
When user enters valid admin credentials
And user clicks on login button
And user navigates to employee list page
When user enters valid name
And clicks on search button
Then user is able to see employee information

file where we write BDD scenarios is feature file
this file has .feature extension


------------------------------------------------------
Class 3
Recap -

we use feature file to write our scenarios
--search employee by id
-- search employee by name

In feature file we write scenarios using gherking language
--Given, when, and, then, scenario, feature

after feature file, we need to create step definitions

----------------------------------------------------------------

Class 4

Recap --
---------
Common methods class in our framework is used to write all the methods we will be using
in majority of scenarios (Code reusability)

sendText method, click etc

in constants class we provide implicit wait, explicit wait values and test data path

page object model is a design pattern
According to page object model, we create page classes for all the screens available in the application

--------------------------------------------------------------------------------------------------------
Class 5

Recap --

Creating multiple steps classes for multiple feature files.

Page object model design pattern

in common methods we are calling page initializers method, this method is going to call the objects of
page classes which will call the constructor and these constructors will initialize all the web elements
-------------------------------------------------------------------------------------------------------

Class 6

Recap --

Runner class - we use this class to execute test cases in cucumber

cucumber options:
-- features - path of  feature file
-- glue - to provide the path of steps definitions
-- dryRun - it provides step definition to add in steps classes
-- monochrome - if it is set to true, it cleans the console
-- tags -  we use tags to execute scenarios in groups
        -- here we use OR and AND to execute scenarios from 2 or more different tags together

Background: we take common steps from scenarios and put them in background

Hooks: we use hooks to provide pre condition and post condition to all the scenarios
We always create hooks class in steps package

Background vs hooks:
background - it is applicable to one feature file
hooks - it is applicable to all the feature files


-----------------------------------------------------------------------------------------------
Class - 7

-- recap
--------- hooks - to write pre conditions and post conditions of the project, we use hooks.
@before and @after - 2 types of hooks we have in cucumber
we always write hooks under steps package

--
Data driven testing part -
-- using examples table and scenario outline
-- using data table
-------------------------------------------------------------------------------------------------------

Class 8-9
------------------------
maven surefire plugin

to clean the project - mvn clean from cmd/terminal
to run the project - mvn test from cmd/terminal
override the tags from cmd - mvn clean verify -Dcucumber.filter.tags="@latest"

mvn clean - it cleans your target folder
mvn test -  to execute our test cases
verify - verifies your code
package - convert your code to packages



-----------------------------------------------------------------------------------




API Notes -

Class 5 -


Rest assured API

It is DSL (domain specific language)
It is java based library that is used to automation rest API'

given, when, then


Rest assured follows the functionality of BDD

pre condition - request preparation, request specification

given - prepare the request
when  - hitting the end point (send the request)
then - expected response


NOTE: baseURI = baseURL


Hamcrest matchers -
It is a popular framework that helps us to create the matcher objects.

prettyPrint - it is used to print the response in console


Class 6


Recap -

Java rest assured API -

given - prepare the request
when - making a call
then - verification/assertion

Class 7

Recap -

To create an employee we use -
POST -
Base url = base URI
end point
Headers
body
token


then -

- jsonPath()

- To retrieve employee from the database
GET -
query parameter
token

@Test - junit annotation we use to execute our test cases
@Fix method order we use to change the flow of execution (Name.Ascending - alphabetical order)

TO update the details of the employee
PUT
body
header
token
end point

200 vs 201


Class 8 -

Recap -

Generate token via automation

Created POST request to add an employee in feature file

API constants class -
API payload constants - the body we need to create, update employee record, we can pass it from
api payload constants class







































































